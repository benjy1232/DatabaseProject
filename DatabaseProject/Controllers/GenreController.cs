using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using MySql.Data.MySqlClient;

namespace DatabaseProject.Controllers;

public class GenreController(ILogger<GenreController> logger, IConfiguration configuration) : Controller
{
    public IActionResult Index()
    {
        ViewBag.GenreNames = GetGenres();
        CreateGenresTable();
        return View();
        
    }
    private void CreateGenresTable()
    {
        string result = "";
        // Okay using raw SQL here bc no user input is needed - no security issue here
        string commandString = "SELECT genre_name FROM Genre";
        try
        {
            using var connection = new MySqlConnection(configuration.GetConnectionString("mySqlConn"));
            connection.Open();
            using var command = connection.CreateCommand();
            command.CommandText = commandString;
            using var reader = command.ExecuteReader();
            while (reader.Read())
            {
                result += $"""
                            <tr>
                              <td>{reader[0]}</td>
                            </tr>
                            """;
            }
        }
        catch (MySqlException ex)
        {
            logger.LogError($"Error {ex.Number} has occurred: {ex.Message}");
        }

        ViewBag.Table = result;
    }
    public IActionResult AddNewGenre(string genreName)
    {
        try
        {
            using var connection = new MySqlConnection(configuration.GetConnectionString("mySqlConn"));
            connection.Open();
            using var command = connection.CreateCommand();
            // Don't add id because it is autogenerated
            command.CommandText = "INSERT INTO Genre (genre_name) VALUES (@genreName)";
            command.Parameters.AddWithValue("@genreName", genreName);
            command.Prepare();
            command.ExecuteNonQuery();
        }
        catch (MySqlException ex)
        {
            if (ex.Number == 1065)
            {
                logger.LogError($"Entry {genreName} already exists");
                return RedirectToAction("Index");
            }
            logger.LogError($"Error {ex.Number} has occurred: {ex.Message}");
            throw;
        }

        return RedirectToAction("Index");
    }
    public IActionResult DeleteGenre(uint id)
    {
        try
        {
            using var connection = new MySqlConnection(configuration.GetConnectionString("mySqlConn"));
            connection.Open();
            using var command = connection.CreateCommand();
            command.CommandText = "DELETE FROM Genre WHERE id = @id";
            command.Parameters.AddWithValue("@id", id);
            command.Prepare();
            int rowAffected = command.ExecuteNonQuery();
            logger.LogInformation($"Command String: {command.CommandText} ID: {id}");
            logger.LogInformation($"Number of rows affected {rowAffected}");
        }
        catch (MySqlException ex)
        {
            logger.LogError($"Error {ex.Number} has occurred: {ex.Message}");
            throw;
        }

        return RedirectToAction("Index");
    }

    public IActionResult UpdateGenre(uint id, string genreName)
    {
        try
        {
            using var connection = new MySqlConnection(configuration.GetConnectionString("mySqlConn"));
            connection.Open();
            using var command = connection.CreateCommand();
            command.CommandText = "UPDATE Genre SET genre_name = @genreName WHERE id = @id";
            command.Parameters.AddWithValue("@genreName", genreName);
            command.Parameters.AddWithValue("@id", id);
            command.Prepare();
            command.ExecuteNonQuery();
        }
        catch (MySqlException ex)
        {
            if (ex.Number == 1065)
            {
                logger.LogError($"Entry {genreName} already exists");
                return RedirectToAction("Index");
            }
            logger.LogError($"Error {ex.Number} has occurred: {ex.Message}");
            throw;
        }

        return RedirectToAction("Index");
    }
    private List<SelectListItem> GetGenres()
    {
        List<SelectListItem> genres = new List<SelectListItem>();
        try
        {
            using var connection = new MySqlConnection(configuration.GetConnectionString("mySqlConn"));
            connection.Open();
            using var command = connection.CreateCommand();
            // id, Genre
            command.CommandText = "SELECT * FROM Genre";

            using var reader = command.ExecuteReader();
            while (reader.Read())
            {
                genres.Add(new SelectListItem(reader[1].ToString(), reader[0].ToString()));
            }
        }
        catch (MySqlException ex)
        {
            logger.LogError($"Error {ex.Number} has occurred: {ex.Message}");
            throw;
        }
        return genres;
    }
}
